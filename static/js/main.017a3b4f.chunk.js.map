{"version":3,"sources":["About.js","components/Navigation.js","styles/images/main/slide1.jpg","styles/images/main/slide2.jpg","styles/images/main/slide3.jpg","components/main/AutoSlide.js","Home.js","components/NotFound.js","App.js","reportWebVitals.js","index.js"],"names":["About","Navigation","to","AutoSlide","useState","slide","setSlide","slideRef","useRef","images","title","image","img1","alt","content","img2","img3","useEffect","current","style","transform","btnClick","e","parseInt","target","innerText","name","className","ref","map","item","index","src","href","onClick","length","Home","NotFound","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"4PAUeA,EARD,WACV,OACI,yC,OCgBOC,G,MAhBI,WACjB,OACE,gCACE,sCACA,+BACE,6BACE,cAAC,IAAD,CAAMC,GAAG,SAAT,qBAEF,uCACA,uCACA,+C,QCdO,MAA0B,mCCA1B,MAA0B,mCCA1B,MAA0B,mC,QCmG1BC,G,MArFG,WAChB,MAA0BC,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAWC,iBAAO,MAElBC,EAAS,CACb,CACEC,MAAO,oFACPC,MAAOC,EACPC,IAAK,8CACLC,QAAS,6BAEX,CACEJ,MAAO,oFACPC,MAAOI,EACPF,IAAK,8CACLC,QAAS,6BAEX,CACEJ,MAAO,oFACPC,MAAOK,EACPH,IAAK,8CACLC,QAAS,8BAGbG,qBAAU,WACRV,EAASW,QAAQC,MAAMC,UAAvB,sBAAkDf,EAAlD,WACC,CAACA,IAEJ,IAcMgB,EAAW,SAAAC,GACf,GAAIjB,IAAUkB,SAASD,EAAEE,OAAOC,WAG9B,OAAO,EAFPnB,EAASiB,SAASD,EAAEE,OAAOE,QAM/B,OACE,mCACE,oBAAIC,UAAU,aAAaC,IAAKrB,EAAhC,SACGE,EAAOoB,KAAI,SAACC,EAAMC,GAAP,OACV,+BACE,qBAAKC,IAAKF,EAAKnB,MAAOE,IAAKiB,EAAKjB,IAAKH,MAAOoB,EAAKpB,QACjD,sBAAKiB,UAAU,YAAf,UACE,6BAAKG,EAAKpB,QACV,4BAAIoB,EAAKhB,UACT,mBAAGmB,KAAK,IAAR,qCALKF,QAUb,sBAAKJ,UAAU,kBAAf,UACE,cAAC,IAAD,CAAqBO,QA9BT,WAEd5B,EADY,IAAVD,EACOI,EAAO0B,OAAS,EAEhB9B,EAAQ,MA2Bf,cAAC,IAAD,CAAsB6B,QAtCV,WACZ7B,GAASI,EAAO0B,OAAS,EAC3B7B,EAAS,GAETA,EAASD,EAAQ,SAoCjB,qBAAKsB,UAAU,eAAf,SACGlB,EAAOoB,KAAI,SAACC,EAAMC,GAAP,OACV1B,IAAU0B,EACR,wBAAoBJ,UAAU,WAAWO,QAASb,EAAlD,SACGU,GADUA,GAIb,wBAAoBL,KAAMK,EAAOG,QAASb,EAA1C,SACGU,GADUA,aC5EVK,EATF,WACX,OACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,QCFSC,EAJE,WACf,OAAO,uFCYMC,EAVH,WACV,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWL,IACjC,cAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,SAASC,UAAWzC,IACtC,cAAC,IAAD,CAAOwC,KAAK,IAAIC,UAAWJ,QCElBK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UAIE,cAAC,IAAD,CAAeC,SAAS,oBAAxB,SAME,cAAC,EAAD,QAGJC,SAASC,eAAe,SAG1Bd,M","file":"static/js/main.017a3b4f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst About = () => {\r\n    return (\r\n        <div>\r\n            About\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport 'styles/navigation.scss';\r\n\r\nconst Navigation = () => {\r\n  return (\r\n    <nav>\r\n      <h1>LOGO</h1>\r\n      <ul>\r\n        <li>\r\n          <Link to=\"/about\">About</Link>\r\n        </li>\r\n        <li>menu1</li>\r\n        <li>menu1</li>\r\n        <li>menu1</li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","export default __webpack_public_path__ + \"static/media/slide1.cb95b48c.jpg\";","export default __webpack_public_path__ + \"static/media/slide2.79fb754d.jpg\";","export default __webpack_public_path__ + \"static/media/slide3.972c3448.jpg\";","import React, { useEffect, useRef, useState } from 'react';\r\nimport img1 from 'styles/images/main/slide1.jpg';\r\nimport img2 from 'styles/images/main/slide2.jpg';\r\nimport img3 from 'styles/images/main/slide3.jpg';\r\nimport { MdKeyboardArrowLeft, MdKeyboardArrowRight } from 'react-icons/md';\r\n\r\nimport 'styles/autoslide.scss';\r\n\r\n// TODO 기능 LIST\r\n// 1. 자동 슬라이드\r\n// 2. 버튼 클릭시 슬라이드(완료)\r\n// 3. 클릭시 해당 상세페이지 이동\r\n// 4. mouseOver시 자동슬라이드 일시 멈춤 mouseout할 경우 다시 자동 슬라이드 추가()\r\n// 5. 하단 버튼 개수 보여주기(완료)\r\nconst AutoSlide = () => {\r\n  const [slide, setSlide] = useState(0);\r\n  const slideRef = useRef(null);\r\n\r\n  const images = [\r\n    {\r\n      title: '슬라이드 첫번째 이미지입니다.',\r\n      image: img1,\r\n      alt: '슬라이드 첫번째',\r\n      content: 'this is some test content'\r\n    },\r\n    {\r\n      title: '슬라이드 두번째 이미지입니다.',\r\n      image: img2,\r\n      alt: '슬라이드 두번째',\r\n      content: 'this is some test content'\r\n    },\r\n    {\r\n      title: '슬라이드 세번째 이미지입니다.',\r\n      image: img3,\r\n      alt: '슬라이드 세번째',\r\n      content: 'this is some test content'\r\n    }\r\n  ];\r\n  useEffect(() => {\r\n    slideRef.current.style.transform = `translateX(-${slide}00vw)`;\r\n  }, [slide]);\r\n\r\n  const nextSlide = () => {\r\n    if (slide >= images.length - 1) {\r\n      setSlide(0);\r\n    } else {\r\n      setSlide(slide + 1);\r\n    }\r\n  };\r\n  const prevSlide = () => {\r\n    if (slide === 0) {\r\n      setSlide(images.length - 1);\r\n    } else {\r\n      setSlide(slide - 1);\r\n    }\r\n  };\r\n  const btnClick = e => {\r\n    if (slide !== parseInt(e.target.innerText)) {\r\n      setSlide(parseInt(e.target.name));\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <header>\r\n      <ul className=\"slide-wrap\" ref={slideRef}>\r\n        {images.map((item, index) => (\r\n          <li key={index}>\r\n            <img src={item.image} alt={item.alt} title={item.title} />\r\n            <div className=\"list-info\">\r\n              <h2>{item.title}</h2>\r\n              <p>{item.content}</p>\r\n              <a href=\"/\">더보기</a>\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <div className=\"side-arrow-wrap\">\r\n        <MdKeyboardArrowLeft onClick={prevSlide} />\r\n        <MdKeyboardArrowRight onClick={nextSlide} />\r\n      </div>\r\n      <div className=\"slide-length\">\r\n        {images.map((item, index) =>\r\n          slide === index ? (\r\n            <button key={index} className=\"slideBtn\" onClick={btnClick}>\r\n              {index}\r\n            </button>\r\n          ) : (\r\n            <button key={index} name={index} onClick={btnClick}>\r\n              {index}\r\n            </button>\r\n          )\r\n        )}\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default AutoSlide;\r\n","import React from 'react';\r\nimport Navigation from 'components/Navigation';\r\nimport AutoSlide from 'components/main/AutoSlide';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div>\r\n      <Navigation />\r\n      <AutoSlide />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nconst NotFound = () => {\r\n  return <div>페이지 오류 입니다.</div>;\r\n};\r\n\r\nexport default NotFound;\r\n","import { Route, Switch } from 'react-router';\r\nimport About from './About';\r\nimport Home from './Home';\r\nimport NotFound from 'components/NotFound';\r\n\r\nconst App = () => {\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/\" component={Home} />\r\n      <Route exact path=\"/about\" component={About} />\r\n      <Route path=\"*\" component={NotFound} />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    {/* HTML5의 History API를 사용하여 페이지를 새로고침하지 않도록 주소를 변경할 수 있도록 해준다.\r\n    즉, 페이지 변경으로 인한 깜빡거림이 없다.\r\n    또한, 현재 주소에 관련된 정보를 props로 조회 및 사용이 가능하도록 만들어준다. */}\r\n    <BrowserRouter basename=\"/cosmetic-service\">\r\n      {/* <BrowserRouter basename={process.env.PUBLIC_URL}> */}\r\n      {/* gh-pages 추가시 Local의 baseUrl이 변경이 됨\r\n      http://localhost:3000/ 에서 http://localhost:3000/cosmetic-service 로 변경되어\r\n      접속시 에러가 났는데 해결방안은 basename을 넣는 것.\r\n      basename : 모든 위치의 기본 URL. */}\r\n      <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}